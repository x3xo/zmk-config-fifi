/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 30 32 31 18 6 7 8 9 10 11 23 22 21 20 19 33 34 35>;
        };

        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41 24 12 0 1 2 3 5 4 17 16 15 14 13 25 26 27 28 29>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <27 26>;
        };
    };

    macros {
        joy: joy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(J) &kp O &kp Y &kp C &kp E &kp SPACE &kp LS(B) &kp A &kp R &kp R &kp I &kp E &kp N &kp T &kp O &kp S &kp SPACE &kp LS(R) &kp LS(N)>;
            label = "JOY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q              &kp W  &kp E             &kp R         &kp T            &kp Y      &kp U      &kp I      &kp O       &kp P                       &none
&none  &HML LEFT_SHIFT A  &kp S  &lt 3 D           &lt 2 F       &lt 1 G          &lt 1 H    &lt 2 J    &kp K      &kp L       &HMR RIGHT_SHIFT SEMICOLON  &none
&none  &kp Z              &kp X  &kp C             &kp V         &kp B            &kp N      &kp M      &kp COMMA  &kp PERIOD  &kp SLASH                   &none
                                 &kp LEFT_COMMAND  &kp LEFT_ALT  &kp BACKSPACE    &kp SPACE  &kp ENTER  &kp RCTRL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR          &kp PERCENT           &kp KP_MULTIPLY  &kp N7        &kp N8        &kp N9        &kp PLUS   &none
&none  &none            &none        &none     &kp LC(LS(DELETE))  &kp LC(LA(DELETE))    &kp KP_DIVIDE    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS  &none
&none  &none            &none        &none     &none               &none                 &kp N0           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &none
                                     &trans    &trans              &trans                &trans           &trans        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &kp CARET          &kp AMPS        &kp ASTRK      &kp LPAR          &kp RPAR           &none
&none  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &kp SQT            &kp UNDERSCORE  &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none
&none  &kp F11  &kp F12  &none   &none   &none      &kp DOUBLE_QUOTES  &kp TILDE       &kp PIPE       &kp LEFT_BRACE    &kp RIGHT_BRACE    &none
                         &trans  &trans  &trans     &trans             &trans          &trans
            >;
        };

        layer_3 {
            bindings = <
&none  &none  &none  &none   &none   &none     &none   &none           &kp UP_ARROW    &none      &none  &none
&none  &none  &none  &none   &none   &none     &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &none  &none
&none  &none  &none  &none   &none   &none     &none   &none           &none           &none      &none  &none
                     &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };
    };
};
